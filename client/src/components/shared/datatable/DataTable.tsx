import {
  Box,
  MantineColor,
  MantineSize,
  MantineTheme,
  Pagination,
  ScrollArea,
  Table,
  Checkbox,
  Text
} from '@mantine/core';
import { flexRender } from '@tanstack/react-table';
import { ReactNode } from 'react';
import { Table as TTable, ColumnDef, RowData } from '@tanstack/react-table';

import classes from './DataTable.module.css';

export const DEFAULT_INITIAL_PAGE = 1;
export const DEFAULT_INITIAL_SIZE = 10;

export type OnChangeCallback<T> = (arg0: T) => void;

export type DataTablePaginationProps = {
  /**
   * Current page number (1-based); if provided, a pagination component is shown
   */
  page: number;

  /**
   * Callback fired after change of each page
   */
  onPageChange?: (page: number) => void;

  /**
   * Total number of records in the dataset
   */
  totalRecords?: number;

  /**
   * Number of records per page
   */
  recordsPerPage: number;

  /**
   * Pagination component size; defaults to `sm`
   */
  paginationSize?: MantineSize;

  /**
   * Pagination text; defaults to ```({ from, to, totalRecords }) => `${from}-${to}/${totalRecords}`
   * ```
   */
  paginationText?: (options: { from: number; to: number; totalRecords: number }) => ReactNode;
};

export type DataTableContextMenuItemProps = {
  /**
   * Unique item key
   */
  key: string;
} & (
  | {
      /**
       * If true, insert an actions divider
       */
      divider: true;
      icon?: never;
      title?: never;
      color?: never;
      hidden?: never;
      disabled?: never;
      onClick?: never;
    }
  | {
      divider?: never;
      /**
       * Item icon
       */
      icon?: ReactNode;

      /**
       * Item title; if not present, one will be generated by "humanizing"
       * the provided item key
       * (i.e. `viewRecord` -> `View record`)
       */
      title?: ReactNode;

      /**
       * Item color
       */
      color?: MantineColor;

      /**
       * if true, the menu item will not be shown
       */
      hidden?: boolean;

      /**
       * if true, the menu item will be disabled
       */
      disabled?: boolean;

      /**
       * Function to call when the menu item is clicked
       */
      onClick: () => void;
    }
);

export type DataGridColumn<T> = {
  /**
   * Column accessor; you can use dot-notation for nested objects property drilling
   * (i.e. `department.name` or `department.company.name`)
   */
  accessor: string;

  /**
   * Optional column header title; if not present, one will be generated by "humanizing"
   * the provided column accessor
   * (i.e. `firstName` -> `First name`; `user.firstName` -> `User first name`)
   */
  title?: ReactNode;

  render?: (record: T) => ReactNode;

  textAlignment?: 'left' | 'right' | 'center';
};

export type DataGridProps<T> = {
  table: TTable<T>;
  onRowClick?: (record: T) => void;
  withBorder?: boolean;
  borderColor?: string | ((theme: MantineTheme) => string);
  rowBorderColor?: string | ((theme: MantineTheme) => string);
  rowContextMenu?: {
    /**
     * Context menu trigger; defaults to `rightClick` for classic behavior
     */
    trigger?: 'rightClick' | 'click';

    /**
     * Menu z-index; defaults to `3`
     */
    zIndex?: number;

    /**
     * Boolean or function accepting the current record as parameter returning boolean;
     * if true, the menu will not be shown
     */
    hidden?: boolean | ((record: T) => boolean);

    /**
     * A function returning the row menu items for the current record
     */
    items: (record: T) => DataTableContextMenuItemProps[];
  };
} & DataTablePaginationProps;

export const getRowSelectionColumn = <T extends RowData>(): ColumnDef<T, unknown> => ({
  id: 'select',
  header: ({ table }) => {
    const handleHeaderSelectionChange = () => {
      const value =
        (!table.getIsAllRowsSelected() && table.getIsSomePageRowsSelected()) ||
        !table.getIsAllPageRowsSelected();
      table.toggleAllPageRowsSelected(value);
    };
    return (
      <Checkbox
        aria-label='header selector '
        {...{
          checked: table.getIsAllPageRowsSelected(),
          indeterminate: !table.getIsAllPageRowsSelected() && table.getIsSomePageRowsSelected(),
          onChange: handleHeaderSelectionChange
        }}
        onClick={(e) => e.stopPropagation()}
      />
    );
  },
  cell: ({ row }) => (
    <Checkbox checked={row.getIsSelected()} onChange={row.getToggleSelectedHandler()} />
  ),
  size: 24
});

export function DataGrid<T>({
  table,
  onPageChange = () => {},
  paginationText = ({ from, to, totalRecords }) => `${from} - ${to} / ${totalRecords}`,
  page,
  paginationSize,
  recordsPerPage,
  totalRecords
}: DataGridProps<T>) {
  const handlePageChange = (page: number) => {
    table.setPageIndex(page - 1);
    onPageChange!(page);
  };

  const recordsLength = table.getRowModel().rows.length;
  return (
    <Box>
      <ScrollArea className={classes.scrollArea}>
        <Table horizontalSpacing='xl' className={classes.table}>
          <thead className={classes.thead}>
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <th
                    key={header.id}
                    className={classes.th}
                    style={{
                      width: header.getSize(),
                      maxWidth: header.getSize()
                    }}
                    role='columnheader'
                  >
                    {flexRender(header.column.columnDef.header, header.getContext())}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody>
            {table.getRowModel().rows.map((row) => {
              const selected = Object.keys(table.getState().rowSelection).indexOf(row.id) !== -1;
              return (
                <tr key={row.id} className={classes.tr} data-selected={selected}>
                  {row.getAllCells().map((cell) => (
                    <td
                      key={cell.id}
                      className={classes.td}
                      style={{
                        width: cell.column.getSize(),
                        minWidth: cell.column.getSize()
                      }}
                      role='cell'
                    >
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </td>
                  ))}
                </tr>
              );
            })}
          </tbody>
        </Table>
      </ScrollArea>
      <DataGridFooter
        page={page}
        paginationSize={paginationSize}
        onPageChange={handlePageChange}
        recordsLength={recordsLength}
        recordsPerPage={recordsPerPage}
        totalRecords={totalRecords}
        paginationText={paginationText}
        horizontalSpacing='lg'
        topBorderColor='#EAECF0'
      />
    </Box>
  );
}

type DataTableFooterProps = DataTablePaginationProps & {
  className?: string;
  recordsLength: number | undefined;
  topBorderColor: string | ((theme: MantineTheme) => string);
  horizontalSpacing: MantineSize | undefined;
};

function DataGridFooter({
  page,
  recordsLength,
  onPageChange,
  paginationSize,
  paginationText,
  totalRecords,
  recordsPerPage,
  horizontalSpacing
}: DataTableFooterProps) {
  const from = (page! - 1) * recordsPerPage + 1;
  const to = from + recordsLength! - 1;

  const paginationTextValue = paginationText!({
    from,
    to,
    totalRecords: totalRecords as number
  });

  return (
    <Box px={horizontalSpacing ?? 'xs'} py='xs'>
      <Text size={paginationSize}>{paginationTextValue}</Text>
      <Pagination
        value={page}
        onChange={onPageChange}
        size={paginationSize}
        total={Math.ceil(totalRecords! / recordsPerPage!)}
        siblings={1}
      />
    </Box>
  );
}
